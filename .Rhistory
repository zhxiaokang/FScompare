roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE)
system.time(rocobj <- roc(response, round(predictor)))
system.time(rocobj <- roc(labels, pred)
)
system.time(rocobj <- roc(aSAH$outcome, aSAH$s100b))
system.time(rocobj <- roc(aSAH$outcome, aSAH$s100b, algorithm = 2))
system.time(rocobj <- roc(labels, pred, algorithm = 2))
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 3)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 2)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 1)
pred[1]
pred[2]<-0
pred[2]<-1
roc(pred,labels)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(pred,
labels, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = TRUE, algorithm = 2)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
# Smooth ROC curve
roc(outcome ~ s100b, aSAH, smooth=TRUE)
# more options, CI and plotting
roc1 <- roc(pred,
labels, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,smooth = FALSE, algorithm = 2)
library(GeoDE)
data(example_expression_data)
remove(list=ls())
data(example_expression_data)
data(example_sampleclass)
data(example_gammas)
example_gammas
head(example_expression_data)
example_sampleclass
chdir_analysis_example <- chdirAnalysis(example_expression_data,example_sampleclass,example_gammas ,CalculateSig=TRUE,nnull=10)
lapply(chdir_analysis_example$results, function(x) x[1:10])
chdir_analysis_example$results
length(chdir_analysis_example$results)
nrow(chdir_analysis_example$results)
ncol(chdir_analysis_example$results)
size(chdir_analysis_example$results)
lapply(chdir_analysis_example$chdirprops[[1]],head)
chdir_analysis_example$chdirprops$number_sig_genes
length(example_expression_data$genenames)
chdirAnalysis(datain, sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
chdirAnalysis(datain, example_sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
chdirAnalysis(example_expression_data, example_sampleclass, gammas = list(1), nnull = 10, CalculateSig = FALSE)
class(example_sampleclass)
q()
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
ROCR.simple$predictions
ROCR.simple$labels
ROCR.simple$predictions
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
pred<-c(1,0,1,1)
label<-c(10,1,0)
label<-c(1,0,1,0)
preds<-prediction(pred,label)
preds
perf <- performance(preds,"tpr","fpr")
perf
library('pROC')
data(aSAH)
# Syntax (response, predictor):
auc(aSAH$outcome, aSAH$s100b)
auc(pred,label)
q()
data("iris")
head(iris)
View(iris)
ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
species = factor(c(rep("s",50), rep("c", 50), rep("v", 50))))
iris3
iris
iris1
iris3[,,1]
iris3[,,2]
x<-matrix(c(1,2,3,4),2,2)
y<-matrix(c(5,6,7,8),2,2)
cbind(x,y)
rbind(x,y)
View(ird)
View(ird)
View(iris)
data(diamonds)
library(ggplot2)
data(diamonds)
class(diamonds)
library(data.table)
dataframe<-data.table(diamonds)
class(dataframe)
test<-data.frame(student=c('xiaoming','xiaohong','xiaogang'),math=c(89,90,78),english=c(97,69,90))
test
?tableGrod
??tableGrod
grid.arrange(test)
?tableGrob
library(gridExtra)
tableGrob(test)
grid.table(test)
text<-tableGrob(test)
grid.arrange(text)
grid.arrange(text)
text<-tableGrob(test,rows=NULL)
grid.arrange(text)
grid.table(test,rows=NULL)
??grid.table
q()
source("http://bioconductor.org/biocLite.R")
biocLite("GOSemSim")
library(GOSemSim)
go1<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006493')
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006499')
mgoSim(go1,go2,ont='MF',organism='human',measure='Wang')
mgoSim(go1,go2,measure = 'Wang')
?mgoSim
d <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
install.packages('org.Hs.eg.db')
source("http://bioconductor.org/biocLite.R")
biocLite('org.Hs.eg.db')
d <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
go1
go2
mgoSim(go1, go2, semData=d, measure="Resnik")
mgoSim(go1, go2, semData=d, measure="Lin")
mgoSim(go1, go2, semData=d, measure="Wang")
mgoSim(go1, go2, semData=d, measure="Jiang")
?godata
d <- godata('org.Hs.eg.db', ont="BP", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="CC", computeIC=FALSE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="BP", computeIC=TRUE)
mgoSim(go1, go2, semData=d, measure="Wang")
d <- godata('org.Hs.eg.db', ont="MF", computeIC=TRUE)
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0006490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','GO:0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','GO:0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','0004169','0008490')
go2<-c('GO:0005739','0005777','0004169','0008490')
go2<-c('0005739','0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
go2<-c('GO:0005739','GO:0005777','0004169','0008490')
mgoSim(go1, go2, semData=d, measure="Wang")
1/3
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
exit
quit
q()
lens <- c(900, 1020, 2000, 770, 3000, 1777)
sum(lens)
sum(lens)/len(lens)
sum(lens)/length(lens)
length(lens)
control<-c(0,0,0,0,0,1,1,1)
drug<-c(0,0,0,0,1,1,1,1)
control<-data.frame(control)
drug<-data.frame(drug)
df<-rbind(data.frame(fill='green',obs=control$control),data.frame(fill='red',obs=drug$drug))
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=1, colour="black", position="dodge") +
scale_fill_identity()
library(ggplot)
library(ggplot2)
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=1, colour="black", position="dodge") +
scale_fill_identity()
View(control)
ggplot(df, aes(x=obs, fill=fill)) +
geom_histogram(binwidth=.1, colour="black", position="dodge") +
scale_fill_identity()
View(control)
which(control$control==1)
length(control$control)
length(control$control==1)
length(control==1)
install.packages('rPython')
library(rPython)
setwd('/Users/xzh004/GitHub/FScompare')
install.packages('Boruta')
library(Boruta)
library(mlbench)
data(Sonar)
View(Sonar)
Bor.son<-Boruta(Class~.,data=Sonar, doTrace=2)
View(Sonar)
print(Bor.son)
stats<-attStats(Bor.son)
print(stats)
plot(normHits)
plot(normHits~meanImp, col=stats$decision, data=stats)
Bor.son<-Boruta(Class~.,data=Sonar, doTrace=1)
Bor.son<-Boruta(Class~.,data=Sonar)
Bor.son$timeTaken
setwd('/Users/xzh004/GitHub/FScompare')
ls
dir()
library(openxlsx)
data.raw <- read.xlsx("/Users/xzh004/Desktop/research/dCod/RNA-Seq_analysis/UiB_Goksoyr_dCod_1_2017/PCLS_BaP-EE2_RNAseq/oldTrans/countFile/normCount/TPM_Normalised_Counts_ALL.xlsx", "TPM")  # each row is a protein, each column is a sample, but the first two columns are pretein names and id
nsample <- 14  # number of samples
nfeature <- nrow(data.raw) - 1  # number of features (proteins)
x.raw <- log2(data.raw[ , c(3:10, 44:49)] + 1)   # nsample samples (control group and high dose group)
num.control <- 8
num.treat <- 6
if (nsample != num.control + num.treat){
print('Number of samples do not agree!')
}
y.raw <- c(rep(1,num.control), rep(2,num.treat))  # control samples are labeled as 0, and treatment samples are labeled as 1
pr.name <- data.raw$accession
pr.id <- data.raw$id
View(data.raw)
x.raw <- log2(data.raw[ , c(3:10, 44:49)] + 1)   # nsample samples (control group and high dose group)
library(xlsx)
data.raw <- read.xlsx("/Users/xzh004/Desktop/research/dCod/RNA-Seq_analysis/UiB_Goksoyr_dCod_1_2017/PCLS_BaP-EE2_RNAseq/oldTrans/countFile/normCount/TPM_Normalised_Counts_ALL.xlsx", "TPM")  # each row is a protein, each column is a sample, but the first two columns are pretein names and id
library(openxlsx)
data.raw <- read.xlsx("/Users/xzh004/Desktop/research/dCod/RNA-Seq_analysis/UiB_Goksoyr_dCod_1_2017/PCLS_BaP-EE2_RNAseq/oldTrans/countFile/normCount/TPM_Normalised_Counts_ALL.xlsx", "TPM")  # each row is a protein, each column is a sample, but the first two columns are pretein names and id
View(data.raw)
class(data.raw)
x.raw <- log2(data.raw[ , c(3:10, 44:49)] + 1)   # nsample samples (control group and high dose group)
temp<-data.raw[,1]
temp<-data.raw[,c(2,5)]
temp<-data.raw[ , c(3:10, 44:49)]
ncol(data.raw)
library(openxlsx)
data.raw <- read.xlsx("/Users/xzh004/Desktop/research/dCod/RNA-Seq_analysis/UiB_Goksoyr_dCod_1_2017/PCLS_BaP-EE2_RNAseq/oldTrans/countFile/normCount/TPM_Normalised_Counts_ALL.xlsx", "TPM")  # each row is a protein, each column is a sample, but the first two columns are pretein names and id
remove(list=ls())
library(openxlsx)
data.raw <- read.xlsx("/Users/xzh004/Desktop/research/dCod/RNA-Seq_analysis/UiB_Goksoyr_dCod_1_2017/PCLS_BaP-EE2_RNAseq/oldTrans/countFile/normCount/TPM_Normalised_Counts_ALL.xlsx", "TPM")  # each row is a protein, each column is a sample, but the first two columns are pretein names and id
data.raw <- read.xlsx("/Users/xzh004/Desktop/research/dCod/RNA-Seq_analysis/UiB_Goksoyr_dCod_1_2017/PCLS_BaP-EE2_RNAseq/oldTrans/countFile/normCount/TPM_Normalised_Counts_ALL.xlsx", sheetIndex = 1)  # each row is a protein, each column is a sample, but the first two columns are pretein names and id
q()
library(openxlsx)
data.raw <- read.xlsx("/Users/xzh004/Desktop/research/dCod/RNA-Seq_analysis/UiB_Goksoyr_dCod_1_2017/PCLS_BaP-EE2_RNAseq/oldTrans/countFile/normCount/TPM_Normalised_Counts_ALL.xlsx", sheetIndex = 1)  # each row is a protein, each column is a sample, but the first two columns are pretein names and id
data.raw <- read.xlsx("/Users/xzh004/Desktop/research/dCod/RNA-Seq_analysis/UiB_Goksoyr_dCod_1_2017/PCLS_BaP-EE2_RNAseq/oldTrans/countFile/normCount/TPM_Normalised_Counts_ALL.xlsx", sheet = 1)  # each row is a protein, each column is a sample, but the first two columns are pretein names and id
nsample <- 14  # number of samples
nfeature <- nrow(data.raw) - 1  # number of features (proteins)
x.raw <- log2(data.raw[ , c(2:9, 43:48)] + 1)   # nsample samples (control group and high dose group)
num.control <- 8
num.treat <- 6
if (nsample != num.control + num.treat){
print('Number of samples do not agree!')
}
y.raw <- c(rep(1,num.control), rep(2,num.treat))  # control samples are labeled as 0, and treatment samples are labeled as 1
pr.name <- data.raw$accession
pr.id <- data.raw$id
View(x.raw)
temp<-r(x.raw)
temp<-t(x.raw)
View(temp)
temp<-t(data.raw)
View(temp)
temp<-t(x.raw)
View(temp)
df<-data.frame(t(x.raw))
View(df)
df<-data.frame(t(x.raw),class=y.raw)
df[,22100:22101]
`colnames<-`(df, colnames(c(data.raw$Gene_ID,'class'))
)
View(df)
colnames(df)<-colnames(c(data.raw$Gene_ID,'class'))
View(df)
View(df)
df
df<-data.frame(t(x.raw),class=y.raw)
View(df)
colnames(df)<-c(data.raw$Gene_ID,'class')
View(df)
df[,22100:22101]
df <- data.frame(t(x.raw),class=y.raw)
colnames(df)<-c(data.raw$Gene_ID,'class')
bor <- Boruta(class~., data = df, doTrace = 1)
library(Boruta)
bor <- Boruta(class~., data = df, doTrace = 1)
df.sim <- df[, 20000:ncol(df)]
bor.sim <- Boruta(class~., data = df.sim, doTrace = 1)
print(bor.sim)
library(openxlsx)
library(Boruta)
data.raw <- read.xlsx("/Users/xzh004/Desktop/research/dCod/SAM_mRMR/mercury.xlsx", sheet = 1)  # each row is a protein, each column is a sample, but the first two columns are pretein names and id
nsample <- 19  # number of samples
nfeature <- nrow(data.raw) - 1  # number of features (proteins)
x.raw <- log2(data.raw[ , c(3:12, 13:21)] + 1)   # nsample samples (control group and high dose group)
num.control <- 10
num.treat <- 9
if (nsample != num.control + num.treat){
print('Number of samples do not agree!')
}
y.raw <- c(rep(1,num.control), rep(2,num.treat))  # control samples are labeled as 0, and treatment samples are labeled as 1
df <- data.frame(t(x.raw),class=y.raw)
colnames(df)<-c(data.raw$Gene_ID,'class')
bor <- Boruta(class~., data = df, doTrace = 1)
View(x.raw)
View(data.raw)
df <- data.frame(t(x.raw),class=y.raw)
colnames(df)<-c(data.raw$accession,'class')
bor <- Boruta(class~., data = df, doTrace = 1)
print(bor)
library(GeoDE)
num.select.genes <- 12
pr.name <- data.raw$accession
pr.id <- data.raw$id
x.train <- x.raw
y.train <- y.raw
select.genes.geode <- rep(0, num.select.genes)
gammas <- 1
data.geode <- cbind(pr.name, x.train)
chdir_analysis <- chdirAnalysis(data.geode, factor(y.train), gammas, CalculateSig=FALSE, nnull=10)
select.genes.geode.names <- names(chdir_analysis$results[[1]][1:num.select.genes])
for (s in seq(1, num.select.genes)){
select.genes.geode[s] <- which(data.raw$accession == select.genes.geode.names[s])
}
print(select.genes.geode)
print(select.genes.geode.names)
bor$finalDecision
print(select.genes.geode.names)
print(bor)
print(select.genes.geode.names)
print(getSelectedAttributes(bor))
select.genes.boruta.names<-getSelectedAttributes(bor)
intersect(select.genes.boruta.names,select.genes.geode.names)
bor$ImpHistory
bor$ImpHistory->imphis
View(imphis)
impsource<-bor$impSource
impsource
stats<-attStats(bor)
View(stats)
stats[,stats$decision=='Confirmed']
stats[,which(stats$decision=='Confirmed')]
which(stats$decision=='Confirmed')
stats[which(stats$decision=='Confirmed'),]
stats[which(stats$meanImp>0),]
stats[which(stats$meanImp>1),]
stats[which(stats$decision=='Confirmed'),]
stats[which(stats$meanImp>2.955049),]
stats[which(stats$meanImp>2.8),]
stats[which(stats$meanImp>2.5),]
stats[which(stats$meanImp>2),]
stats[which(stats$meanImp>1.5),]
stats[which(stats$meanImp>1),]
plot(Boruta.Ozone)
plot(bor)
bor<-Boruta(class~., data=df, doTrace=2, ntree=500)
plot(bor)
View(data.raw)
head(data.raw)->temp
temp
temp[which(temp$id==1),2]<-90000
temp
print(bor)
bor <- Boruta(class~., data = df, doTrace = 1, maxRuns = 1000)
print(bor)
bor <- Boruta(class~., data = df, doTrace = 1, maxRuns = 10000)
print(bor)
bor$ImpHistory
attStats(bor)
stats
print(stats)
View(stats)
temp<-stats[order(-normHits)]
example(order)
?order
temp<-stats[order(-normHits),]
temp<-stats[with(stats, order(-normHits)]
temp<-stats[with(stats, order(-normHits)_]
temp<-stats[with(stats, order(-normHits)),]
temp
View(temp)
stat<-attStats(bor)
temp <- stat[with(stat, order(normHits))]
temp <- stat[with(stat, order(normHits)),]
temp <- stat[with(stat, order(-normHits)),]
temps <- stats[with(stats, order(-normHits)),]
View(temps)
plot(normHits~meanImp, col=stat$decision,data=stat)
plot(normHits~meanImp, col=stats$decision,data=stats)
bor1 <- Boruta(class~., data = df, doTrace = 1, maxRuns = 1000)
bor2 <- Boruta(class~., data = df, doTrace = 1, maxRuns = 10000)
stats1<-attStats(bor1)
stats2<-attStats(bor2)
stats1.sort<-stats1[with(stats1,order(meanImp)),]
stats2.sort<-stats2[with(stats2,order(meanImp)),]
View(stats1.sort)
View(stats2.sort)
stats1.sort<-stats1[with(stats1,order(-meanImp)),]
stats2.sort<-stats2[with(stats2,order(-meanImp)),]
which(colname(stats2.sort)=='ENSGMOP00000005855')
which(colnames(stats2.sort)=='ENSGMOP00000005855')
which(stats2.sort==‘ENSGMOP00000005855)
which(stats2.sort=='ENSGMOP00000005855')
which(stats2.sort$meanImp==0.05888244)
stats2.sort$meanImp==0.05888244
stats2.sort$meanImp>0.05888244
which(stats2.sort$meanImp>0.05888244)
max(which(stats2.sort$meanImp>0.05888244))
max(which(stats1.sort$meanImp>0.05888244))
stats1.sort$meanImp::maxImp
bor3 <- Boruta(class~., pValue=0.05,data = df, doTrace = 1, maxRuns = 10000)
stats3<-attStats(bor3)
stats3.sort <- stats3[with(stats2, order(meanImp)),]
View(stats3.sort)
stats3.sort <- stats3[with(stats2, order(-meanImp)),]
stats3.sort <- stats3[with(stats3, order(-meanImp)),]
bor4 <- Boruta(class~., data = df, doTrace = 1)
stats4<-attStats(bor4)
stats4.sort<-stats4[with(stats4, order(-"meanImp")),]
stats4.sort<-stats4[with(stats4, order(-meanImp)),]
View(stats4.sort)
max(which(stats4.sort$meanImp>0.05888244))
max(which(stats2.sort$meanImp>0.05888244))
